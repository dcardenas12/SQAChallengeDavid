const LandingPage = require('../pages/Landing.page')
const LoginPage = require('../pages/Login.page')
const DashboardPage = require('../pages/Dashboard.page')
require('dotenv').config()

describe('Tasks creation scenarios',() => {
    it('create tasks successfully', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.createTasks(1)
        await DashboardPage.validateCreatedTasks()
    })
    it('create multiple tasks', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.createTasks(10)
        await DashboardPage.validateCreatedTasks()
    })
    it('create tasks successfully with specific date', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.addCustomDueDate("19/12/2021")
        await DashboardPage.createTasks(1)
        await DashboardPage.validateCreatedTasks()
    })
    it('create tasks successfully with date set as tomorrow', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.addCustomDueDate("tomorrow")
        await DashboardPage.createTasks(1)
        await DashboardPage.validateCreatedTasks()
    })
    it('create tasks successfully with date set as next week', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.addCustomDueDate("next week")
        await DashboardPage.createTasks(1)
        await DashboardPage.validateCreatedTasks()
    })
    it('create tasks successfully with date set as no date', async () => {
        await browser.url('/')
        await LandingPage.navigateToLoginPage()
        await LoginPage.loginWithCredentials(process.env.USER_EMAIL,process.env.USER_PASSWORD)
        await DashboardPage.changeTimeZoneWhenPrompted()
        await DashboardPage.validateSuccessfulLogin()
        await DashboardPage.clickOnAddTaskButton()
        await DashboardPage.addCustomDueDate("no date")
        await DashboardPage.createTasks(1)
        await DashboardPage.validateCreatedTasks()
    })
})